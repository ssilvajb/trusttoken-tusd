// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Blacklisted extends ethereum.Event {
  get params(): Blacklisted__Params {
    return new Blacklisted__Params(this);
  }
}

export class Blacklisted__Params {
  _event: Blacklisted;

  constructor(event: Blacklisted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isBlacklisted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetBurnBounds extends ethereum.Event {
  get params(): SetBurnBounds__Params {
    return new SetBurnBounds__Params(this);
  }
}

export class SetBurnBounds__Params {
  _event: SetBurnBounds;

  constructor(event: SetBurnBounds) {
    this._event = event;
  }

  get newMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TUSD extends ethereum.SmartContract {
  static bind(address: Address): TUSD {
    return new TUSD("TUSD", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnMax(): BigInt {
    let result = super.call("burnMax", "burnMax():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnMax", "burnMax():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnMin(): BigInt {
    let result = super.call("burnMin", "burnMin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnMin", "burnMin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canBurn(param0: Address): boolean {
    let result = super.call("canBurn", "canBurn(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_canBurn(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("canBurn", "canBurn(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateAllowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "delegateAllowance",
      "delegateAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_delegateAllowance(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateAllowance",
      "delegateAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateApprove(
    spender: Address,
    value: BigInt,
    origSender: Address
  ): boolean {
    let result = super.call(
      "delegateApprove",
      "delegateApprove(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegateApprove(
    spender: Address,
    value: BigInt,
    origSender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegateApprove",
      "delegateApprove(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateBalanceOf(who: Address): BigInt {
    let result = super.call(
      "delegateBalanceOf",
      "delegateBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(who)]
    );

    return result[0].toBigInt();
  }

  try_delegateBalanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateBalanceOf",
      "delegateBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateDecreaseApproval(
    spender: Address,
    subtractedValue: BigInt,
    origSender: Address
  ): boolean {
    let result = super.call(
      "delegateDecreaseApproval",
      "delegateDecreaseApproval(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
        ethereum.Value.fromAddress(origSender)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegateDecreaseApproval(
    spender: Address,
    subtractedValue: BigInt,
    origSender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegateDecreaseApproval",
      "delegateDecreaseApproval(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
        ethereum.Value.fromAddress(origSender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateIncreaseApproval(
    spender: Address,
    addedValue: BigInt,
    origSender: Address
  ): boolean {
    let result = super.call(
      "delegateIncreaseApproval",
      "delegateIncreaseApproval(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
        ethereum.Value.fromAddress(origSender)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegateIncreaseApproval(
    spender: Address,
    addedValue: BigInt,
    origSender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegateIncreaseApproval",
      "delegateIncreaseApproval(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
        ethereum.Value.fromAddress(origSender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateTotalSupply(): BigInt {
    let result = super.call(
      "delegateTotalSupply",
      "delegateTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegateTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateTotalSupply",
      "delegateTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateTransfer(to: Address, value: BigInt, origSender: Address): boolean {
    let result = super.call(
      "delegateTransfer",
      "delegateTransfer(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegateTransfer(
    to: Address,
    value: BigInt,
    origSender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegateTransfer",
      "delegateTransfer(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateTransferFrom(
    from: Address,
    to: Address,
    value: BigInt,
    origSender: Address
  ): boolean {
    let result = super.call(
      "delegateTransferFrom",
      "delegateTransferFrom(address,address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegateTransferFrom(
    from: Address,
    to: Address,
    value: BigInt,
    origSender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegateTransferFrom",
      "delegateTransferFrom(address,address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(origSender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rounding(): i32 {
    let result = super.call("rounding", "rounding():(uint8)", []);

    return result[0].toI32();
  }

  try_rounding(): ethereum.CallResult<i32> {
    let result = super.tryCall("rounding", "rounding():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateApproveCall extends ethereum.Call {
  get inputs(): DelegateApproveCall__Inputs {
    return new DelegateApproveCall__Inputs(this);
  }

  get outputs(): DelegateApproveCall__Outputs {
    return new DelegateApproveCall__Outputs(this);
  }
}

export class DelegateApproveCall__Inputs {
  _call: DelegateApproveCall;

  constructor(call: DelegateApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get origSender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegateApproveCall__Outputs {
  _call: DelegateApproveCall;

  constructor(call: DelegateApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateDecreaseApprovalCall extends ethereum.Call {
  get inputs(): DelegateDecreaseApprovalCall__Inputs {
    return new DelegateDecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DelegateDecreaseApprovalCall__Outputs {
    return new DelegateDecreaseApprovalCall__Outputs(this);
  }
}

export class DelegateDecreaseApprovalCall__Inputs {
  _call: DelegateDecreaseApprovalCall;

  constructor(call: DelegateDecreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get origSender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegateDecreaseApprovalCall__Outputs {
  _call: DelegateDecreaseApprovalCall;

  constructor(call: DelegateDecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateIncreaseApprovalCall extends ethereum.Call {
  get inputs(): DelegateIncreaseApprovalCall__Inputs {
    return new DelegateIncreaseApprovalCall__Inputs(this);
  }

  get outputs(): DelegateIncreaseApprovalCall__Outputs {
    return new DelegateIncreaseApprovalCall__Outputs(this);
  }
}

export class DelegateIncreaseApprovalCall__Inputs {
  _call: DelegateIncreaseApprovalCall;

  constructor(call: DelegateIncreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get origSender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegateIncreaseApprovalCall__Outputs {
  _call: DelegateIncreaseApprovalCall;

  constructor(call: DelegateIncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateTransferCall extends ethereum.Call {
  get inputs(): DelegateTransferCall__Inputs {
    return new DelegateTransferCall__Inputs(this);
  }

  get outputs(): DelegateTransferCall__Outputs {
    return new DelegateTransferCall__Outputs(this);
  }
}

export class DelegateTransferCall__Inputs {
  _call: DelegateTransferCall;

  constructor(call: DelegateTransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get origSender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegateTransferCall__Outputs {
  _call: DelegateTransferCall;

  constructor(call: DelegateTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateTransferFromCall extends ethereum.Call {
  get inputs(): DelegateTransferFromCall__Inputs {
    return new DelegateTransferFromCall__Inputs(this);
  }

  get outputs(): DelegateTransferFromCall__Outputs {
    return new DelegateTransferFromCall__Outputs(this);
  }
}

export class DelegateTransferFromCall__Inputs {
  _call: DelegateTransferFromCall;

  constructor(call: DelegateTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get origSender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DelegateTransferFromCall__Outputs {
  _call: DelegateTransferFromCall;

  constructor(call: DelegateTransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class ReclaimEtherCall extends ethereum.Call {
  get inputs(): ReclaimEtherCall__Inputs {
    return new ReclaimEtherCall__Inputs(this);
  }

  get outputs(): ReclaimEtherCall__Outputs {
    return new ReclaimEtherCall__Outputs(this);
  }
}

export class ReclaimEtherCall__Inputs {
  _call: ReclaimEtherCall;

  constructor(call: ReclaimEtherCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReclaimEtherCall__Outputs {
  _call: ReclaimEtherCall;

  constructor(call: ReclaimEtherCall) {
    this._call = call;
  }
}

export class ReclaimTokenCall extends ethereum.Call {
  get inputs(): ReclaimTokenCall__Inputs {
    return new ReclaimTokenCall__Inputs(this);
  }

  get outputs(): ReclaimTokenCall__Outputs {
    return new ReclaimTokenCall__Outputs(this);
  }
}

export class ReclaimTokenCall__Inputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReclaimTokenCall__Outputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }
}

export class SetBlacklistedCall extends ethereum.Call {
  get inputs(): SetBlacklistedCall__Inputs {
    return new SetBlacklistedCall__Inputs(this);
  }

  get outputs(): SetBlacklistedCall__Outputs {
    return new SetBlacklistedCall__Outputs(this);
  }
}

export class SetBlacklistedCall__Inputs {
  _call: SetBlacklistedCall;

  constructor(call: SetBlacklistedCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isBlacklisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBlacklistedCall__Outputs {
  _call: SetBlacklistedCall;

  constructor(call: SetBlacklistedCall) {
    this._call = call;
  }
}

export class SetBurnBoundsCall extends ethereum.Call {
  get inputs(): SetBurnBoundsCall__Inputs {
    return new SetBurnBoundsCall__Inputs(this);
  }

  get outputs(): SetBurnBoundsCall__Outputs {
    return new SetBurnBoundsCall__Outputs(this);
  }
}

export class SetBurnBoundsCall__Inputs {
  _call: SetBurnBoundsCall;

  constructor(call: SetBurnBoundsCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBurnBoundsCall__Outputs {
  _call: SetBurnBoundsCall;

  constructor(call: SetBurnBoundsCall) {
    this._call = call;
  }
}

export class SetCanBurnCall extends ethereum.Call {
  get inputs(): SetCanBurnCall__Inputs {
    return new SetCanBurnCall__Inputs(this);
  }

  get outputs(): SetCanBurnCall__Outputs {
    return new SetCanBurnCall__Outputs(this);
  }
}

export class SetCanBurnCall__Inputs {
  _call: SetCanBurnCall;

  constructor(call: SetCanBurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _canBurn(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetCanBurnCall__Outputs {
  _call: SetCanBurnCall;

  constructor(call: SetCanBurnCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
